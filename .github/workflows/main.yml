name: Build Vue App

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest  # 使用Windows运行器

    steps:
    - name: Get version
      id: get_version
      run: | 
        echo "Tag ref: $env:GITHUB_REF"
      shell: pwsh  # 使用PowerShell Core

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'

    - name: Install pnpm
      run: |
        npm install -g pnpm@8
        pnpm --version
      shell: cmd  # 使用CMD安装全局包更可靠

    - name: Install Dependencies && run build
      run: | 
        pnpm install
        $env:NODE_OPTIONS = "--max_old_space_size=4096"
        pnpm run build
      shell: pwsh

    - name: Print tag
      run: |
        echo "The tag is $env:GITHUB_REF_NAME"
      shell: pwsh
      
    - name: Write version file
      run: |
        New-Item -Path ./dist -ItemType Directory -Force  # 确保目录存在
        "xplayui:$env:GITHUB_REF_NAME" | Out-File -FilePath ./dist/version.txt -Encoding ascii
      shell: pwsh

    - name: Create zip file
      run: |
        Compress-Archive -Path ./dist -DestinationPath ./dist.zip -Force
      shell: pwsh

    - name: Upload Windows Executable
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist.zip

    - name: Generate release notes
      run: |
        # 使用绝对路径确保在正确位置创建文件
        $notesPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "release_notes.md"
        # 确保文件不存在时创建空文件
        New-Item -Path $notesPath -ItemType File -Force | Out-Null
        # 设置文件可写权限
        attrib -R $notesPath
        # 生成内容
        python generate_release_notes.py | Out-File -FilePath $notesPath -Encoding utf8
      shell: pwsh

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: dist.zip